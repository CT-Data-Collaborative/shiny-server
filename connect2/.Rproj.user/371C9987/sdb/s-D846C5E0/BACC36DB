{
    "collab_server" : "",
    "contents" : "#\n# This is the server logic of a Shiny web application. You can run the\n# application by clicking 'Run App' above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n\n# Define server logic\nshinyServer(function(input, output, session) {\n  cols <- c(\"1\" = \"darkblue\")\n    region_map_reactive <- reactive({\n\t\tif(input$select==\"Statewide\") {\n        ggplot() + geom_polygon(data = dcf_regions_CT, aes(x = long, y = lat, group = group, fill = Value, col=\"yellow\"), color = \"black\") + \n        scale_fill_distiller(guide=FALSE, direction=1) + scale_colour_manual(values = cols) +  theme(rect = element_blank(), axis.ticks = element_blank(), axis.text.x = element_blank(), \n        axis.text.y = element_blank()) +\n        labs(x=\"\", y=\"\")\n\t\t} else if (input$select==\"Southwest Region\") {\n        ggplot() + geom_polygon(data = dcf_regions_1, aes(x = long, y = lat, group = group, fill = Value), color = \"black\") + \n        scale_fill_distiller(guide=FALSE, direction=1) + theme(rect = element_blank(), axis.ticks = element_blank(), axis.text.x = element_blank(), \n        axis.text.y = element_blank()) +\n        labs(x=\"\", y=\"\")\n\t\t} else if (input$select==\"South Central Region\") {\n        ggplot() + geom_polygon(data = dcf_regions_2, aes(x = long, y = lat, group = group, fill = Value), color = \"black\") + \n        scale_fill_distiller(guide=FALSE, direction=1) + theme(rect = element_blank(), axis.ticks = element_blank(), axis.text.x = element_blank(), \n        axis.text.y = element_blank()) +\n        labs(x=\"\", y=\"\")\n\t\t} else if (input$select==\"Eastern Region\") {\n        ggplot() + geom_polygon(data = dcf_regions_3, aes(x = long, y = lat, group = group, fill = Value), color = \"black\") + \n        scale_fill_distiller(guide=FALSE, direction=1) + theme(rect = element_blank(), axis.ticks = element_blank(), axis.text.x = element_blank(), \n        axis.text.y = element_blank()) +\n        labs(x=\"\", y=\"\")\n\t\t} else if (input$select==\"North Central Region\") {\n        ggplot() + geom_polygon(data = dcf_regions_4, aes(x = long, y = lat, group = group, fill = Value), color = \"black\") + \n        scale_fill_distiller(guide=FALSE, direction=1) + theme(rect = element_blank(), axis.ticks = element_blank(), axis.text.x = element_blank(), \n        axis.text.y = element_blank()) +\n        labs(x=\"\", y=\"\")\n\t\t} else if (input$select==\"Western Region\") {\n        ggplot() + geom_polygon(data = dcf_regions_5, aes(x = long, y = lat, group = group, fill = Value), color = \"black\") + \n        scale_fill_distiller(guide=FALSE, direction=1) + theme(rect = element_blank(), axis.ticks = element_blank(), axis.text.x = element_blank(), \n        axis.text.y = element_blank()) +\n        labs(x=\"\", y=\"\")\n\t\t} else if (input$select==\"Central Region\") {\n        ggplot() + geom_polygon(data = dcf_regions_6, aes(x = long, y = lat, group = group, fill = Value), color = \"black\") + \n        scale_fill_distiller(guide=FALSE, direction=1) + theme(rect = element_blank(), axis.ticks = element_blank(), axis.text.x = element_blank(), \n        axis.text.y = element_blank()) +\n        labs(x=\"\", y=\"\")\n\t\t  }\n\t})\n\n  output$gg_regions <- renderPlot({region_map_reactive()}, height = 200, width = 300)  \n  ###########################\n  region_text_reactive <- reactive({\n    if(input$select==\"Statewide\") {\n      paste(\" \")\n    } else {\n      HTML(paste(\"<font color=\\\"#000000\\\"><b>\", \"Towns in:\", input$select, \"</b></font>\"))\n    }\n  })\n  output$region_text <- renderUI({region_text_reactive()})\n  ###########################\n  region_list_reactive <- reactive({\n    if(input$select==\"Southwest Region\") {\n            HTML(paste(\"<font color=\\\"#000000\\\">\", \"<ol><li>Bridgeport</li><li>Darien</li><li>Easton</li><li>Fairfield</li><li>Greenwich</li><li>Monroe</li><li>New Canaan</li><li>Norwalk</li><li>Stamford</li><li>Stratford</li><li>Trumbull</li><li>Weston</li><li>Westport</li><li>Wilton</li></ol>\", \"</font>\"))\n    } else if (input$select==\"South Central Region\") {\n            HTML(paste(\"<font color=\\\"#000000\\\">\", \"<ol><li>Ansonia</li><li>Bethany</li><li>Branford</li><li>Derby</li><li>East Haven</li><li>Hamden</li><li>Milford</li><li>New Haven </li><li>North Branford</li><li>North Haven</li><li>Orange</li><li>Seymour</li><li>Shelton</li><li>West Haven</li><li>Woodbridge</li></ol>\", \"</font>\"))\n    } else if (input$select==\"Eastern Region\") {\n            HTML(paste(\"<font color=\\\"#000000\\\">\", \"<ol><li>Ashford</li><li>Bozrah </li><li>Brooklyn </li><li>Canterbury </li><li>Chaplin </li><li>Chester </li><li>Clinton </li><li>Colchester </li><li>Columbia </li><li>Coventry </li><li>Cromwell </li><li>Deep River </li><li>Durham </li><li>East Haddam </li><li>East Hampton </li><li>East Lyme </li><li>Eastford </li><li>Essex </li><li>Franklin </li><li>Griswold </li><li>Groton </li><li>Guilford </li><li>Haddam </li><li>Hampton </li><li>Killingly </li><li>Killingworth </li><li>Lebanon </li><li>Ledyard </li><li>Lisbon </li><li>Lyme </li><li>Madison </li><li>Mansfield </li><li>Middlefield  </li><li>Middletown </li><li>Montville </li><li>New London</li><li>North Stonington </li><li>Norwich </li><li>Old Lyme </li><li>Old Saybrook </li><li>Plainfield </li><li>Pomfret </li><li>Portland </li><li>Preston </li><li>Putnam </li><li>Salem </li><li>Scotland </li><li>Sprague </li><li>Sterling </li><li>Stonington </li><li>Thompson </li><li>Union </li><li>Voluntown </li><li>Waterford </li><li>Westbrook </li><li>Willington </li><li>Windham </li><li>Woodstock</li></ol>\", \"</font>\"))\n    } else if (input$select==\"North Central Region\") {\n            HTML(paste(\"<font color=\\\"#000000\\\">\", \"<ol><li>Andover</li><li>Bloomfield</li><li>Bolton</li><li>East Granby</li><li>East Hartford</li><li>East Windsor</li><li>Ellington</li><li>Enfield</li><li>Glastonbury</li><li>Granby</li><li>Hartford</li><li>Hebron</li><li>Manchester</li><li>Marlborough</li><li>Somers</li><li>South Windsor</li><li>Stafford</li><li>Suffield</li><li>Tolland</li><li>Vernon</li><li>West Hartford</li><li>Windsor</li><li>Windsor Locks</li></ol>\", \"</font>\"))\n    } else if (input$select==\"Western Region\") {\n            HTML(paste(\"<font color=\\\"#000000\\\">\", \"<ol><li>Barkhamsted</li><li>Beacon Falls</li><li>Bethel</li><li>Bethlehem</li><li>Bridgewater</li><li>Brookfield</li><li>Canaan</li><li> Cheshire</li><li>Colebrook</li><li>Cornwall</li><li>Danbury</li><li>Goshen</li><li>Hartland</li><li>Harwinton</li><li>Kent</li><li> Litchfield</li><li>Middlebury</li><li>Morris</li><li>Naugatuck</li><li>New Fairfield</li><li>New Hartford</li><li>New Milford</li><li> Newtown</li><li>Norfolk</li><li>North Canaan</li><li>Oxford</li><li>Prospect</li><li>Redding</li><li>Ridgefield</li><li>Roxbury</li><li> Salisbury</li><li>Sharon</li><li>Sherman</li><li>Southbury</li><li>Thomaston</li><li>Torrington</li><li>Warren</li><li>Washington</li><li> Waterbury</li><li>Watertown</li><li>Winchester</li><li>Wolcott</li><li>Woodbury</li></ol>\", \"</font>\"))\n    } else if (input$select==\"Central Region\") {\n            HTML(paste(\"<font color=\\\"#000000\\\">\", \"<ol><li>Avon</li><li>Berlin</li><li>Bristol</li><li>Burlington</li><li>Canton</li><li>Farmington</li><li>Meriden</li><li>New Britain</li><li> Newington</li><li>Plainville</li><li>Plymouth</li><li>Rocky Hill</li><li>Simsbury</li><li>Southington</li><li>Wallingford</li><li> Wethersfield</li></ol>\", \"</font>\"))\n    }\n  })\n  ###########################\n  output$region_list <- renderUI({region_list_reactive()})\n  ###########################\n  output$HPlot1 <- renderPlotly({\n    shiny::validate(\n      need(input$select != \"\", \"Please select a Region to populate the chart\")\n    )    \n    selected<- input$select\n    h_plot1 <- health_regions[health_regions$`Measure Type` == \"Rate\" & health_regions$Region == selected & \n                               health_regions$Year == max_year_health_regions,]\n    h_plot1 <- unique(h_plot1 %>%\n                       group_by(Type) %>% \n                       mutate(avg_Value = round(mean(Value), 1)) %>% \n                       select(-Town, -Value, -FIPS)) %>% \n                       rename(Value = avg_Value)\n    h_plot1 <- spread(h_plot1, Type, Value)\n    m <- list(b=50) # l = left; r = right; t = top; b = bottom\n    hplot1 <- plot_ly(h_plot1, x = \"Fetal\", y = ~Fetal, name = 'Fetal', type = 'bar', \n                     hoverinfo = 'text', text = ~paste0(Fetal), textposition = 'auto') %>%\n             add_trace(x = \"Infant\", y = ~Infant, name = 'Infant', text = ~paste0(Infant)) %>%\n             add_trace(x = \"Neonatal\", y = ~Neonatal, name = 'Neonatal', text = ~paste0(Neonatal)) %>%\n             add_trace(x = \"Postneonatal\", y = ~Postneonatal, name = 'Postneonatal', text = ~paste0(Postneonatal)) %>%\n     layout(margin=m, title = paste(paste0(unique(h_plot1$Region), \",\"), \"All Races,\", max_year_health_regions, sep = \" \"),\n         #xaxis = list(title = \"Type\"),\n         yaxis = list(title = \"Rate\"), \n         showlegend = FALSE, \n         annotations = list(x = 1, y = -0.15, text = \"Source: Connecticut Department of Public Health\", \n                            showarrow = F, xref='paper', yref='paper', \n                            xanchor='right', yanchor='auto', xshift=0, yshift=0,\n                            font=list(size=15, color=\"grey\")))\n     hplot1\n  })\n  ###########################\n  health_rates_regions$Total.Births <- as.numeric(health_rates_regions$Total.Births)\n  \n  output$HPlot2 <- renderPlotly({\n    shiny::validate(\n      need(input$select != \"\", \"Please select a Region to populate the chart\")\n    )    \n    selected<- input$select\n    h_plot2 <- health_rates_regions[health_rates_regions$Region == selected & health_rates_regions$RR_YR == max_year_health_rates_regions &\n                                      health_rates_regions$Type %in% c(\"Fetal\", \"Infant\") & health_rates_regions$Race != \"All\",]\n\n    if (selected == \"Statewide\") {\n    h_plot2 <- unique(h_plot2 %>%\n      select(Race, Type, Death.Rate, Region))      \n    h_plot2 <- spread(h_plot2, Type, Death.Rate)\n    } else {\n    h_plot2 <- h_plot2 %>%\n      group_by(Region, Race, Type) %>%\n      mutate(Total_Births = sum(Total.Births),  #per race\n             Total_Deaths = sum(Value))  #per race/type\n    \n    h_plot2$Death_Rate <- round(h_plot2$Total_Deaths*1000/h_plot2$Total_Births,2)\n    \n    h_plot2 <- unique(h_plot2 %>% \n      select(Race, Type, Death_Rate, Region))\n    h_plot2 <- spread(h_plot2, Type, Death_Rate)\n      \n    }\n    h_plot2$Fetal <- as.numeric(h_plot2$Fetal)\n    h_plot2$Infant <- as.numeric(h_plot2$Infant)\n    m <- list(b=50) # l = left; r = right; t = top; b = bottom\n    hplot2 <- plot_ly(h_plot2, x = ~Race, y = ~Fetal, name = 'Fetal', type = 'bar', \n                     hoverinfo = 'text', text = ~paste0(Fetal), textposition = 'auto') %>%\n             add_trace(y = ~Infant, name = 'Infant', text = ~paste0(Infant)) %>%\n    layout(margin=m, title = paste(paste0(unique(h_plot2$Region), \",\"), \n                                    max_year_health_rates_regions, sep = \" \"),\n         xaxis = list(title = \"\"),\n         yaxis = list(title = \"Rate\"), \n         legend = list(x = 0.8, y = 0.85), \n         annotations = list(x = 1, y = -0.15, text = \"Source: Connecticut Department of Public Health\", \n                            showarrow = F, xref='paper', yref='paper', \n                            xanchor='right', yanchor='auto', xshift=0, yshift=0,\n                            font=list(size=15, color=\"grey\")))\n     hplot2\n  })  \n  ###########################\n  output$ECPlot1 <- renderPlotly({\n    shiny::validate(\n      need(input$select != \"\", \"Please select a Region to populate the chart\")\n    )    \n    selected<- input$select\n    ec_plot1 <- b23_regions[b23_regions$Region == selected & b23_regions$Year == max_year_b23_regions,]\n    ec_plot1 <- unique(ec_plot1 %>%\n                       group_by(Indicator) %>% \n                       mutate(tot_Value = round(sum(Value), 0)) %>% \n                       select(-Town, -Value, -FIPS)) %>% \n                       rename(Value = tot_Value)\n    ec_plot1 <- spread(ec_plot1, Indicator, Value)\n    m <- list(b=80) # l = left; r = right; t = top; b = bottom\n    x <- list(tickangle = 0)\n    ecplot1 <- plot_ly(ec_plot1, x = \"Evaluations\", y = ~Evaluations, name = 'Evaluations', type = 'bar', \n                     hoverinfo = 'text', text = ~paste0(Evaluations), textposition = 'auto') %>%\n             add_trace(x = \"Exited to<br>Early Childhood<br>Special Education\", \n                       y = ~`Exited to Early Childhood Special Education`, \n                       name = 'Exited to<br>Early<br>Childhood<br>Special<br>Education', \n                       text = ~paste0(`Exited to Early Childhood Special Education`)) %>%\n             add_trace(x = \"Individual<br>Family Service<br>Plans\", \n                       y = ~`Individual Family Service Plans`, name = 'Individual<br>Family<br>Service<br>Plans', \n                       text = ~paste0(`Individual Family Service Plans`)) %>%\n             add_trace(x = \"Referrals\", y = ~Referrals, name = 'Referrals', text = ~paste0(Referrals)) %>%\n             add_trace(x = \"Total Eligible\", y = ~`Total Eligible`, name = 'Total Eligible', text = ~paste0(`Total Eligible`)) %>%\n             add_trace(x = \"Total Served\", y = ~`Total Served`, name = 'Total Served', text = ~paste0(`Total Served`)) %>%\n     layout(margin=m, title = paste(paste0(unique(ec_plot1$Region), \",\"), max_year_b23_regions, sep = \" \"),\n         xaxis = x, #list(title = \"Indicator\"),\n         yaxis = list(title = \"Number\"), \n         showlegend = FALSE, \n         annotations = list(x = 1, y = -0.25, text = \"Source: Connecticut Office of Early Childhood\", \n                            showarrow = F, xref='paper', yref='paper', \n                            xanchor='right', yanchor='auto', xshift=0, yshift=0,\n                            font=list(size=15, color=\"grey\")))\n     ecplot1\n  })    \n  ###########################\n  # ec_reactive2 <- reactive({\n  #   selected<- input$select\n  #   b23c_regions$`Total Births` <- as.numeric(b23c_regions$`Total Births`)\n  #   ec_plot2 <- b23c_regions[b23c_regions$Region == selected & b23c_regions$Year == max_year_b23c_regions \n  #                            & b23c_regions$`Measure Type` == \"Number\",]\n  #   ec_plot2 <- unique(ec_plot2 %>% \n  #                        group_by(Indicator) %>% \n  #                        mutate(tot_Value = round(sum(Value), 0), \n  #                               total_Births = sum(`Total Births`), \n  #                               `% Cohort` = round((tot_Value / total_Births)*100, 1)) %>% \n  #                        select(-`% Cohort`, -Value, -`Total Births`, -FIPS, -Year, -`Measure Type`, -Variable, -Town, -total_Births))\n  # \n  #   ec_plot2 <- spread(ec_plot2, Indicator, tot_Value)\n  #   return(ec_plot2)\n  # })\n\n  output$ECPlot2 <- renderPlotly({\n    shiny::validate(\n      need(input$select != \"\", \"Please select a Region to populate the chart\")\n    )    \n    selected<- input$select\n    b23c_regions$`Total Births` <- as.numeric(b23c_regions$`Total Births`)\n    ec_plot2 <- b23c_regions[b23c_regions$Region == selected & b23c_regions$Year == max_year_b23c_regions \n                             & b23c_regions$`Measure Type` == \"Number\",]\n    ec_plot2 <- unique(ec_plot2 %>% \n                         group_by(Indicator) %>% \n                         mutate(tot_Value = round(sum(Value), 0), \n                                total_Births = sum(`Total Births`), \n                                `% Cohort` = round((tot_Value / total_Births)*100, 1)) %>% \n                         select(-`% Cohort`, -Value, -`Total Births`, -FIPS, -Year, -`Measure Type`, -Variable, -Town, -total_Births))\n\n    ec_plot2 <- spread(ec_plot2, Indicator, tot_Value)\n    m <- list(b=80) # l = left; r = right; t = top; b = bottom\n    x <- list(tickangle = 0)\n    ecplot2 <- plot_ly(ec_plot2, x = \"Evaluations\", y = ~Evaluations, name = 'Evaluations', type = 'bar', \n                     hoverinfo = 'text', text = ~paste0(Evaluations), textposition = 'auto') %>%\n             add_trace(x = \"Exited to<br>Early Childhood<br>Special Education\", \n                       y = ~`Exited to Early Childhood Special Education`, \n                       name = 'Exited to Early<br>Childhood<br>Special<br>Education', \n                       text = ~paste0(`Exited to Early Childhood Special Education`)) %>%\n             add_trace(x = \"Individual Family<br>Service Plans\", \n                       y = ~`Individual Family Service Plans`, name = 'Individual Family<br>Service<br>Plans', \n                       text = ~paste0(`Individual Family Service Plans`)) %>%\n             add_trace(x = \"Referrals\", y = ~Referrals, name = 'Referrals', text = ~paste0(Referrals)) %>%\n             add_trace(x = \"Total Eligible\", y = ~`Total Eligible`, name = 'Total Eligible', text = ~paste0(`Total Eligible`)) %>%\n             add_trace(x = \"Total Served\", y = ~`Total Served`, name = 'Total Served', text = ~paste0(`Total Served`)) %>%\n     layout(margin=m, title = paste(paste0(unique(ec_plot2$Region), \",\"), max_year_b23c_regions, \"Birth Cohort\", sep = \" \"),\n         xaxis = x, #list(title = \"Indicator\"),\n         yaxis = list(title = \"Number\"), \n         showlegend = FALSE, \n         annotations = list(x = 1, y = -0.25, text = \"Source: Connecticut Office of Early Childhood\", \n                            showarrow = F, xref='paper', yref='paper', \n                            xanchor='right', yanchor='auto', xshift=0, yshift=0,\n                            font=list(size=15, color=\"grey\")))\n     ecplot2    \n  })\n  ###########################\n  # ec_reactive3 <- reactive({\n  #   selected<- input$select\n  #   b23c_regions$`Total Births` <- as.numeric(b23c_regions$`Total Births`)\n  #   ec_plot3 <- b23c_regions[b23c_regions$Region == selected & b23c_regions$Year == max_year_b23c_regions \n  #                            & b23c_regions$`Measure Type` == \"Number\",]\n  #   ec_plot3 <- unique(ec_plot3 %>% \n  #                        group_by(Indicator) %>% \n  #                        mutate(tot_Value = round(sum(Value), 0), \n  #                               total_Births = sum(`Total Births`), \n  #                               `% Cohort` = round((tot_Value / total_Births)*100, 1)) %>% \n  #                        select(-tot_Value, -Value, -`Total Births`, -FIPS, -Year, -`Measure Type`, -Variable, -Town, -total_Births))\n  # \n  #   ec_plot3 <- spread(ec_plot3, Indicator, `% Cohort`)\n  #   return(ec_plot3)\n  # })\n  \n  output$ECPlot3 <- renderPlotly({\n    shiny::validate(\n      need(input$select != \"\", \"Please select a Region to populate the chart\")\n    )    \n        selected<- input$select\n    b23c_regions$`Total Births` <- as.numeric(b23c_regions$`Total Births`)\n    ec_plot3 <- b23c_regions[b23c_regions$Region == selected & b23c_regions$Year == max_year_b23c_regions \n                             & b23c_regions$`Measure Type` == \"Number\",]\n    ec_plot3 <- unique(ec_plot3 %>% \n                         group_by(Indicator) %>% \n                         mutate(tot_Value = round(sum(Value), 0), \n                                total_Births = sum(`Total Births`), \n                                `% Cohort` = round((tot_Value / total_Births)*100, 1)) %>% \n                         select(-tot_Value, -Value, -`Total Births`, -FIPS, -Year, -`Measure Type`, -Variable, -Town, -total_Births))\n\n    ec_plot3 <- spread(ec_plot3, Indicator, `% Cohort`)\n    m <- list(b=80) # l = left; r = right; t = top; b = bottom\n    x <- list(tickangle = 0)\n    ecplot3 <- plot_ly(ec_plot3, x = \"Evaluations\", y = ~Evaluations, name = 'Evaluations', type = 'bar', \n                     hoverinfo = 'text', text = ~paste0(Evaluations, '%'), textposition = 'auto') %>%\n             add_trace(x = \"Exited to<br>Early Childhood<br>Special Education\", \n                       y = ~`Exited to Early Childhood Special Education`, \n                       name = 'Exited to<br>Early<br>Childhood<br>Special<br>Education', \n                       text = ~paste0(`Exited to Early Childhood Special Education`, '%')) %>%\n             add_trace(x = \"Individual<br>Family Service<br>Plans\", \n                       y = ~`Individual Family Service Plans`, name = 'Individual<br>Family<br>Service<br>Plans', \n                       text = ~paste0(`Individual Family Service Plans`, '%')) %>%\n             add_trace(x = \"Referrals\", y = ~Referrals, name = 'Referrals', text = ~paste0(Referrals, '%')) %>%\n             add_trace(x = \"Total Eligible\", y = ~`Total Eligible`, name = 'Total Eligible', text = ~paste0(`Total Eligible`, '%')) %>%\n             add_trace(x = \"Total Served\", y = ~`Total Served`, name = 'Total Served', text = ~paste0(`Total Served`, '%')) %>%\n     layout(margin=m, title = paste(paste0(unique(ec_plot3$Region), \",\"), \"% of\", max_year_b23c_regions, \"Birth Cohort\", sep = \" \"),\n         xaxis = x, #list(title = \"Indicator\"),\n         yaxis = list(title = \"Percent\"), \n         showlegend = FALSE, \n         annotations = list(x = 1, y = -0.25, text = \"Source: Connecticut Office of Early Childhood\", \n                            showarrow = F, xref='paper', yref='paper', \n                            xanchor='right', yanchor='auto', xshift=0, yshift=0,\n                            font=list(size=15, color=\"grey\")))\n     ecplot3 \n  })\n  ###########################  \n  jj_reactive <- reactive({\n    selected<- input$select\n    jj_plot1 <- jj_regions[jj_regions$Year == max_year_jj_regions & jj_regions$Region == selected & \n                               jj_regions$Variable == \"Juvenile Arrests\" & jj_regions$`Measure Type` == \"Number\" &\n                               jj_regions$Crime != \"Total\" & jj_regions$`Age Range` != \"Total\",]\n    jj_plot1 <- unique(jj_plot1 %>% \n                         group_by(`Age Range`, Crime) %>% \n                         mutate(tot_Value = sum(Value)) %>% \n                         select(-Town, -Value, -FIPS, -Year, -Variable, -`Measure Type`))\n    jj_plot1 <- spread(jj_plot1, `Age Range`, tot_Value)    \n    jj_plot1 <- jj_plot1[jj_plot1$Crime %in% c(\"Drugs\", \"Other\", \"Disorderly Conduct\", \"Larceny\", \"Other Assault (Simple)\"),]\n    \n    return(jj_plot1)\n  })\n\n  output$JJPlot1 <- renderPlotly({\n    shiny::validate(\n      need(input$select != \"\", \"Please select a Region to populate the chart\")\n    )    \n        selected<- input$select\n    jj_plot1 <- jj_regions[jj_regions$Year == max_year_jj_regions & jj_regions$Region == selected & \n                               jj_regions$Variable == \"Juvenile Arrests\" & jj_regions$`Measure Type` == \"Number\" &\n                               jj_regions$Crime != \"Total\" & jj_regions$`Age Range` != \"Total\",]\n    jj_plot1 <- unique(jj_plot1 %>% \n                         group_by(`Age Range`, Crime) %>% \n                         mutate(tot_Value = sum(Value)) %>% \n                         select(-Town, -Value, -FIPS, -Year, -Variable, -`Measure Type`))\n    jj_plot1 <- spread(jj_plot1, `Age Range`, tot_Value)    \n    jj_plot1 <- jj_plot1[jj_plot1$Crime %in% c(\"Drugs\", \"Other\", \"Disorderly Conduct\", \"Larceny\", \"Other Assault (Simple)\"),]\n    \n    m <- list(b=110) # l = left; r = right; t = top; b = bottom\n    x <- list(tickangle = 0)\n    jjplot1 <- plot_ly(jj_plot1, x = ~str_wrap(Crime, width=15), y = ~`0 to 9 years`, name = '0 to 9 years', type = 'bar', \n                     hoverinfo = 'text', text = ~paste0(`0 to 9 years`), textposition = 'auto') %>%\n             add_trace( y = ~`10 to 14 years`, name = '10 to 14 years', text = ~paste0(`10 to 14 years`)) %>%\n             add_trace( y = ~`15 to 17 years`, name = '15 to 17 years', text = ~paste0(`15 to 17 years`)) %>%\n     layout(margin=m, title = paste(paste0(unique(jj_plot1$Region), \",\"), max_year_jj_regions, sep = \" \"),\n         xaxis = list(title = \"\"),\n         yaxis = list(title = \"Number\"), \n         barmode = 'group', legend = list(orientation = 'h', x = 0.2, y = -0.15),\n         annotations = list(x = 1, y = -0.35, text = \"Source: Connecticut Uniform Crime Report\", \n                            showarrow = F, xref='paper', yref='paper', \n                            xanchor='right', yanchor='auto', xshift=0, yshift=0,\n                            font=list(size=15, color=\"grey\")))\n     jjplot1    \n  })\n  ###########################  \n  # jj_reactive2 <- reactive({\n\n  #   return(jj_plot2)\n  # })\n  output$JJPlot2 <- renderPlotly({\n    shiny::validate(\n      need(input$select != \"\", \"Please select a Region to populate the chart\")\n    )    \n    selected<- input$select\n    jj_plot2 <- jj_regions[jj_regions$Year == max_year_jj_regions & jj_regions$Region == selected & \n                             jj_regions$Variable == \"Juvenile Arrests\" & \n                             jj_regions$`Measure Type` == \"Rate (per 100,000)\" & \n                             jj_regions$Crime == \"Total\",]\n    jj_plot2 <- unique(jj_plot2 %>% \n                         group_by(`Age Range`, Crime) %>% \n                         mutate(avg_Value = round(mean(Value), 1)) %>% \n                         select(-Town, -Value, -FIPS))\n    jj_plot2 <- spread(jj_plot2, `Age Range`, avg_Value)\n    m <- list(b=90) # l = left; r = right; t = top; b = bottom\n    x <- list(tickangle = 0)\n    jjplot2 <- plot_ly(jj_plot2, x = \"0 to 9 years\", y = ~`0 to 9 years`, name = '0 to 9 years', type = 'bar', \n                     hoverinfo = 'text', text = ~paste0(`0 to 9 years`), textposition = 'auto') %>%\n               add_trace(x = \"10 to 14 years\", y = ~`10 to 14 years`, name = '10 to 14 years', text = ~paste0(`10 to 14 years`)) %>%\n               add_trace(x = \"15 to 17 years\", y = ~`15 to 17 years`, name = '15 to 17 years', text = ~paste0(`15 to 17 years`)) %>%\n               add_trace(x = \"Total\", y = ~`Total`, name = 'Total', text = ~paste0(Total)) %>%\n     layout(margin=m, title = paste(paste0(unique(jj_plot2$Region), \",\"), max_year_jj_regions, sep = \" \"),\n         xaxis = x, #list(title = \"Indicator\"),\n         yaxis = list(title = \"Rate per 100,000 Persons\"), \n         showlegend = FALSE, \n         annotations = list(x = 1, y = -0.2, text = \"Source: Connecticut Uniform Crime Report\", \n                            showarrow = F, xref='paper', yref='paper', \n                            xanchor='right', yanchor='auto', xshift=0, yshift=0,\n                            font=list(size=15, color=\"grey\")))\n     jjplot2 \n  })\n  ###########################  \n  cols <- c(\"0 to 3 Years\", \"4 to 6 Years\", \"7 to 12 Years\", \"13 to 17 Years\", \"18 Years and Over\", \"Total\")\n  cw_total[cols] <- sapply(cw_total[cols],as.numeric)\n\n   output$CWTable <- renderTable({\n      placement <- input$rd\n      selected<- input$select\n    if(input$select==\"Statewide\") {\n      if(input$rd == \"In State\") {\n       table <- cw_total[cw_total$Region == selected & cw_total$`Location of Placement` == placement,]\n       table <- table %>% select(-Region, -`Location of Placement`)\n      } else {       \n       table  <- cw_total[cw_total$Region == selected & cw_total$`Location of Placement` == placement,]\n       table <- table %>% select(-Region, -`Location of Placement`)\n        }\n    } else if (input$select==\"Southwest Region\") {\n      if(input$rd == \"In State\") {\n       table <- cw_total[cw_total$Region == selected & cw_total$`Location of Placement` == placement,] \n       table <- table %>% select(-Region, -`Location of Placement`)\n      } else {\n       table <- cw_total[cw_total$Region == selected & cw_total$`Location of Placement` == placement,] \n       table <- table %>% select(-Region, -`Location of Placement`)\n      }\n    } else if (input$select==\"South Central Region\") {\n      if(input$rd == \"In State\") {\n        table <- cw_total[cw_total$Region == selected & cw_total$`Location of Placement` == placement,]\n        table <- table %>% select(-Region, -`Location of Placement`)\n      } else {\n        table <- cw_total[cw_total$Region == selected & cw_total$`Location of Placement` == placement,] \n        table <- table %>% select(-Region, -`Location of Placement`)\n      }\n    } else if (input$select==\"Eastern Region\") {\n      if(input$rd == \"In State\") {\n        table <- cw_total[cw_total$Region == selected & cw_total$`Location of Placement` == placement,] \n        table <- table %>% select(-Region, -`Location of Placement`)\n      } else {\n        table <- cw_total[cw_total$Region == selected & cw_total$`Location of Placement` == placement,] \n        table <- table %>% select(-Region, -`Location of Placement`)\n      }\n    } else if (input$select==\"North Central Region\") {\n      if(input$rd == \"In State\") {\n        table <- cw_total[cw_total$Region == selected & cw_total$`Location of Placement` == placement,] \n        table <- table %>% select(-Region, -`Location of Placement`)\n      } else {\n        table <- cw_total[cw_total$Region == selected & cw_total$`Location of Placement` == placement,] \n        table <- table %>% select(-Region, -`Location of Placement`)\n      }\n    } else if (input$select==\"Western Region\") {\n      if(input$rd == \"In State\") {\n        table <- cw_total[cw_total$Region == selected & cw_total$`Location of Placement` == placement,]\n        table <- table %>% select(-Region, -`Location of Placement`)\n      } else {\n        table <- cw_total[cw_total$Region == selected & cw_total$`Location of Placement` == placement,] \n        table <- table %>% select(-Region, -`Location of Placement`)\n      }\n    } else if (input$select==\"Central Region\") {\n      if(input$rd == \"In State\") {\n        table <- cw_total[cw_total$Region == selected & cw_total$`Location of Placement` == placement,] \n        table <- table %>% select(-Region, -`Location of Placement`)\n      } else {\n        table <- cw_total[cw_total$Region == selected & cw_total$`Location of Placement` == placement,] \n        table <- table %>% select(-Region, -`Location of Placement`)\n      }\n    }\n  }, caption = \"Source: CT Dept of Children and Families, accessed via data.ct.gov\", striped=T, hover=T, condensed=T, responsive=T, spacing=\"xs\")\n  ########################### \n\n  output$CW_gender <- renderPlotly({\n    shiny::validate(\n      need(input$select != \"\", \"Please select a Region to populate the chart\")\n    )    \n    selected<- input$select\n    placement <- input$rd\n    cw_plot1 <- cw_gender_total[cw_gender_total$Region == selected & \n                             cw_gender_total$`Location of Placement` == placement & cw_gender_total$Gender != \"Total\" &\n                             cw_gender_total$`Type of Placement` != \"Total\",]\n    cw_plot1 <- spread(cw_plot1, Gender, Value)\n    cw_plot1$`Type of Placement` <- gsub(\" Placement\", \"\", cw_plot1$`Type of Placement`)\n    m <- list(l=220, b=110) # l = left; r = right; t = top; b = bottom\n    cwplot1 <- plot_ly(cw_plot1, y = ~str_wrap(`Type of Placement`, width=40), x = ~Female, name = 'Female', type = 'bar', \n                     hoverinfo = 'text', text = ~paste0(Female), textposition = 'auto', marker = list(color = 'rgba(222,45,38,0.8)')) %>%\n             add_trace( x = ~Male, name = 'Male', text = ~paste0(Male), marker = list(color = 'rgb(49,130,189)')) %>%\n     layout(margin=m, title = paste(paste0(unique(cw_plot1$Region), \",\"), max_year_cw_gender, \"-\", placement, sep = \" \"),\n         xaxis = list(title = \"Number\", tickangle = 0),\n         yaxis = list(title = \"Type of Placement\"), \n         barmode = 'group', legend = list(x = -0.2, y = -0.1, orientation = 'h'),\n         annotations = list(x = 1, y = -0.35, text = \"Source: CT Dept of Children and Families, accessed via data.ct.gov\", \n                            showarrow = F, xref='paper', yref='paper', \n                            xanchor='right', yanchor='auto', xshift=0, yshift=0,\n                            font=list(size=15, color=\"grey\")))\n     cwplot1 \n  })\n  ########################### \n\n  output$CW_race <- renderPlotly({\n    shiny::validate(\n      need(input$select != \"\", \"Please select a Region to populate the chart\")\n    )    \n    selected<- input$select\n    placement <- input$rd\n    \n    cw_plot2 <- cw_backfill[cw_backfill$Region == selected & \n                             cw_backfill$`Location of Placement` == placement & cw_backfill$`Race/Ethnicity` != \"Total\" &\n                             cw_backfill$`Type of Placement` != \"Total\",]\n\n    cw_plot2 <- spread(cw_plot2, `Race/Ethnicity`, Value)\n    cw_plot2$`Type of Placement` <- gsub(\" Placement\", \"\", cw_plot2$`Type of Placement`)\n\n    m <- list(l=220, b=110) # l = left; r = right; t = top; b = bottom\n    cwplot2 <- plot_ly(cw_plot2, y = ~str_wrap(`Type of Placement`, width=40), x = ~Other, name = 'Other', type = 'bar', \n                     hoverinfo = 'text', text = ~paste0(Other), textposition = 'auto', marker = list(color='#d62728')) %>%\n             add_trace( x = ~Black, name = 'Black or African American', text = ~paste0(Black), marker = list(color='#2ca02c')) %>%\n             add_trace( x = ~Hispanic, name = 'Hispanic or Latino', text = ~paste0(Hispanic), marker = list(color = '#ff7f0e')) %>%\n             add_trace( x = ~White, name = 'White', text = ~paste0(White), marker = list(color = '#1f77b4')) %>%\n     layout(margin=m, title = paste(paste0(unique(cw_plot2$Region), \",\"), max_year_cw_race, \"-\", \n                                    placement, sep = \" \"),\n         xaxis = list(title = \"Number\", tickangle = 0),\n         yaxis = list(title = \"Type of Placement\"), \n         barmode = 'group', legend = list(x = -0.2, y = -0.39, traceorder='reversed'),\n         annotations = list(x = 1, y = -0.4, text = \"Source: CT Dept of Children and Families, accessed via data.ct.gov\", \n                            showarrow = F, xref='paper', yref='paper', \n                            xanchor='right', yanchor='auto', xshift=0, yshift=0,\n                            font=list(size=15, color=\"grey\")))\n     cwplot2    \n  })\n  ###########################  \n  output$eey_text <- renderText({\n     input$select\n  })  \n  ########################### \n  output$eey_value_f <- renderText({\n    selected<- input$select\n    cw_plot3 <- cw_eey_regions[cw_eey_regions$Region == selected & cw_eey_regions$`Measure Type` == \"Number\",]\n    cw_plot3 <- spread(cw_plot3, Variable, Value)\n    \n    cw_plot3_calc <- unique(cw_plot3 %>% \n      group_by(Gender) %>% \n      mutate(tot_Value = sum(`Employed or Enrolled Youth`), \n             tot_moe = aggregate_moe(`Margins of Error`)) %>% \n      select(Gender, `Measure Type`, Region, tot_Value, tot_moe))\n    \n    cw_plot3_calc <- cw_plot3_calc %>% \n       gather(variable, value, -(Region:Gender)) %>%\n       unite(temp, Gender, variable) %>%\n       spread(temp, value)\n    cw_plot3_calc$Female_tot_Value <- round(cw_plot3_calc$Female_tot_Value, 0)\n    value <- format(unique(cw_plot3_calc$Female_tot_Value), big.mark=\",\", scientific=FALSE) \n  })   \n  ########################### \n  output$eey_value_m <- renderText({\n    selected<- input$select\n    cw_plot3 <- cw_eey_regions[cw_eey_regions$Region == selected & cw_eey_regions$`Measure Type` == \"Number\",]\n    cw_plot3 <- spread(cw_plot3, Variable, Value)\n    \n    cw_plot3_calc <- unique(cw_plot3 %>% \n      group_by(Gender) %>% \n      mutate(tot_Value = sum(`Employed or Enrolled Youth`), \n             tot_moe = aggregate_moe(`Margins of Error`)) %>% \n      select(Gender, `Measure Type`, Region, tot_Value, tot_moe))\n    \n    cw_plot3_calc <- cw_plot3_calc %>% \n       gather(variable, value, -(Region:Gender)) %>%\n       unite(temp, Gender, variable) %>%\n       spread(temp, value)\n    cw_plot3_calc$Male_tot_Value <- round(cw_plot3_calc$Male_tot_Value, 0)\n    value <- format(unique(cw_plot3_calc$Male_tot_Value), big.mark=\",\", scientific=FALSE) \n  })   \n  ########################### \n  output$eey_value_t <- renderText({\n    selected<- input$select\n    cw_plot3 <- cw_eey_regions[cw_eey_regions$Region == selected & cw_eey_regions$`Measure Type` == \"Number\",]\n    cw_plot3 <- spread(cw_plot3, Variable, Value)\n    \n    cw_plot3_calc <- unique(cw_plot3 %>% \n      group_by(Gender) %>% \n      mutate(tot_Value = sum(`Employed or Enrolled Youth`), \n             tot_moe = aggregate_moe(`Margins of Error`)) %>% \n      select(Gender, `Measure Type`, Region, tot_Value, tot_moe))\n    \n    cw_plot3_calc <- cw_plot3_calc %>% \n       gather(variable, value, -(Region:Gender)) %>%\n       unite(temp, Gender, variable) %>%\n       spread(temp, value)\n    cw_plot3_calc$Total_tot_Value <- round(cw_plot3_calc$Total_tot_Value, 0)\n    value <- format(unique(cw_plot3_calc$Total_tot_Value), big.mark=\",\", scientific=FALSE) \n  })    \n  ########################### \n  output$eey_moe_f <- renderText({\n    selected<- input$select\n    cw_plot3 <- cw_eey_regions[cw_eey_regions$Region == selected & cw_eey_regions$`Measure Type` == \"Number\",]\n    cw_plot3 <- spread(cw_plot3, Variable, Value)\n    \n    cw_plot3_calc <- unique(cw_plot3 %>% \n      group_by(Gender) %>% \n      mutate(tot_Value = sum(`Employed or Enrolled Youth`), \n             tot_moe = aggregate_moe(`Margins of Error`)) %>% \n      select(Gender, `Measure Type`, Region, tot_Value, tot_moe))\n    \n    cw_plot3_calc <- cw_plot3_calc %>% \n       gather(variable, value, -(Region:Gender)) %>%\n       unite(temp, Gender, variable) %>%\n       spread(temp, value)\n    cw_plot3_calc$Female_tot_moe <- round(cw_plot3_calc$Female_tot_moe, 0)\n    moe <- format(unique(cw_plot3_calc$Female_tot_moe), big.mark=\",\", scientific=FALSE) \n    paste(\"+/-\", moe, sep = \" \")\n  })     \n  ########################### \n  output$eey_moe_m <- renderText({\n    selected<- input$select\n    cw_plot3 <- cw_eey_regions[cw_eey_regions$Region == selected & cw_eey_regions$`Measure Type` == \"Number\",]\n    cw_plot3 <- spread(cw_plot3, Variable, Value)\n    \n    cw_plot3_calc <- unique(cw_plot3 %>% \n      group_by(Gender) %>% \n      mutate(tot_Value = sum(`Employed or Enrolled Youth`), \n             tot_moe = aggregate_moe(`Margins of Error`)) %>% \n      select(Gender, `Measure Type`, Region, tot_Value, tot_moe))\n    \n    cw_plot3_calc <- cw_plot3_calc %>% \n       gather(variable, value, -(Region:Gender)) %>%\n       unite(temp, Gender, variable) %>%\n       spread(temp, value)\n    cw_plot3_calc$Male_tot_moe <- round(cw_plot3_calc$Male_tot_moe, 0)\n    moe <- format(unique(cw_plot3_calc$Male_tot_moe), big.mark=\",\", scientific=FALSE) \n    paste(\"+/-\", moe, sep = \" \")\n  })  \n  ########################### \n  output$eey_moe_t <- renderText({\n    selected<- input$select\n    cw_plot3 <- cw_eey_regions[cw_eey_regions$Region == selected & cw_eey_regions$`Measure Type` == \"Number\",]\n    cw_plot3 <- spread(cw_plot3, Variable, Value)\n    \n    cw_plot3_calc <- unique(cw_plot3 %>% \n      group_by(Gender) %>% \n      mutate(tot_Value = sum(`Employed or Enrolled Youth`), \n             tot_moe = aggregate_moe(`Margins of Error`)) %>% \n      select(Gender, `Measure Type`, Region, tot_Value, tot_moe))\n    \n    cw_plot3_calc <- cw_plot3_calc %>% \n       gather(variable, value, -(Region:Gender)) %>%\n       unite(temp, Gender, variable) %>%\n       spread(temp, value)\n    cw_plot3_calc$Total_tot_moe <- round(cw_plot3_calc$Total_tot_moe, 0)\n    moe <- format(unique(cw_plot3_calc$Total_tot_moe), big.mark=\",\", scientific=FALSE) \n    paste(\"+/-\", moe, sep = \" \")\n  }) \n  ########################### \n\n  output$DPlot_age_race <- renderPlotly({\n      shiny::validate(\n      need(input$select != \"\", \"Please select a Region to populate the chart\")\n    )    \n    selected<- input$select\n    race_sel <- input$race\n    d_plot_age_race <- pop_by_age_race_regions[pop_by_age_race_regions$Region == selected \n                                               & pop_by_age_race_regions$`Race/Ethnicity` == race_sel,]\n\n    d_plot_age_race <- spread(d_plot_age_race, Variable, Value)\n    options(scipen = 9999)\n    d_plot_age_race_calc <- unique(d_plot_age_race %>%\n      group_by(`Age Cohort`, `Race/Ethnicity`, Region) %>%\n      mutate(Sum_Pop = sum(Population)) %>%\n      select(`Age Cohort`, `Race/Ethnicity`, Sum_Pop, Region) %>% \n      rename(Race = `Race/Ethnicity`, Age = `Age Cohort`))\n    xState <- list(tickangle = 0, title = \"Population\", \n              tickmode='array', \n              tickvals = c(-600000, -500000, -400000, -300000, -200000, -100000, 0, 100000, 200000, 300000, 400000, 500000, 600000), \n              ticktext = c('600000', '500000', '400000', '300000', '200000', '100000', '0', '100000', '200000', '300000', '400000', '500000', '600000'))\n    xRegion <- list(tickangle = 0, title = \"Population\", \n               tickmode='array', \n               tickvals = c(-100000, -80000, -60000, -40000, -20000, 0, 20000, 40000, 60000, 80000, 100000), \n               ticktext = c('100000', '80000', '60000', '40000', '20000', '0', '20000', '40000', '60000', '80000', '100000'))\n    y <- list(tickangle = 0, title = \"Age Range\")\n    if (input$select == \"Statewide\") {\n      xx = xState\n    } else {\n      xx = xRegion\n    }\n    d_plot_age_race_calc$Age <- factor(d_plot_age_race_calc$Age, levels = c(\"0 to 4 years\",\n                                                                            \"5 to 9 years\",\n                                                                            \"10 to 14 years\",\n                                                                            \"15 to 19 years\",\n                                                                            \"20 to 24 years\",\n                                                                            \"25 to 29 years\",\n                                                                            \"30 to 34 years\",\n                                                                            \"35 to 44 years\",\n                                                                            \"45 to 54 years\",\n                                                                            \"55 to 64 years\",\n                                                                            \"65 to 74 years\",\n                                                                            \"75 to 84 years\",\n                                                                            \"85 years and over\"))\n    \n\n    d_plot_age_race_calc <- spread(d_plot_age_race_calc, Age, Sum_Pop)\n    m <- list(b=100, r=50) # l = left; r = right; t = top; b = bottom\n    dplotagerace <- plot_ly(d_plot_age_race_calc, x=\"0 to 4\", y = ~`0 to 4 years`, type = 'bar',\n                        hoverinfo = 'name+text', textposition = 'auto',\n                        name = '0 to 4 years', text = ~paste0(`0 to 4 years`), marker = list(color = 'rgb(49,130,189)')) %>%\n                    add_trace(x=\"5 to 9\", y=~`5 to 9 years`, name = '5 to 9 years',  text = ~paste0(`5 to 9 years`)) %>%\n                    add_trace(x=\"10 to 14\", y=~`10 to 14 years`, name = '10 to 14 years',  text = ~paste0(`10 to 14 years`)) %>%\n                    add_trace(x=\"15 to 19\", y=~`15 to 19 years`, name = '15 to 19 years',  text = ~paste0(`15 to 19 years`)) %>%\n                    add_trace(x=\"20 to 24\", y=~`20 to 24 years`, name = '20 to 24 years',  text = ~paste0(`20 to 24 years`)) %>%\n                    add_trace(x=\"25 to 29\", y=~`25 to 29 years`, name = '25 to 29 years',  text = ~paste0(`25 to 29 years`)) %>%\n                    add_trace(x=\"30 to 34\", y=~`30 to 34 years`, name = '30 to 34 years',  text = ~paste0(`30 to 34 years`)) %>%\n                    add_trace(x=\"35 to 44\", y=~`35 to 44 years`, name = '35 to 44 years',  text = ~paste0(`35 to 44 years`)) %>%\n                    add_trace(x=\"45 to 54\", y=~`45 to 54 years`, name = '45 to 54 years',  text = ~paste0(`45 to 54 years`)) %>%\n                    add_trace(x=\"55 to 64\", y=~`55 to 64 years`, name = '55 to 64 years',  text = ~paste0(`55 to 64 years`)) %>%\n                    add_trace(x=\"65 to 74\", y=~`65 to 74 years`, name = '65 to 74 years',  text = ~paste0(`65 to 74 years`)) %>%\n                    add_trace(x=\"75 to 84\", y=~`75 to 84 years`, name = '75 to 84 years',  text = ~paste0(`75 to 84 years`)) %>%\n                    add_trace(x=\"85 and over\", y=~`85 years and over`, name = '85 years and over',  text = ~paste0(`85 years and over`)) %>%\n                layout(margin = m, showlegend = FALSE,\n                       title = paste(paste0(unique(d_plot_age_race_calc$Region), \",\"), max_year_pop_regions, sep = \" \"),          \n                       xaxis = list(title = \"Age Group\", tickangle = 30),\n                       yaxis = list(title = \"Number\"), \n                       annotations = list(x = 1, y = -0.3, text = \"Source: U.S. Census\", \n                            showarrow = F, xref='paper', yref='paper', \n                            xanchor='right', yanchor='auto', xshift=0, yshift=0,\n                            font=list(size=15, color=\"grey\")),\n                       barmode = 'group',\n                       xaxis = xx, \n                       yaxis = y)\n\n    dplotagerace\n  })\n  ###########################  \n\n  output$DPlot_age <- renderPlotly({\n      shiny::validate(\n      need(input$select != \"\", \"Please select a Region to populate the chart\")\n    )    \n    selected<- input$select\n    d_plot_age <- pop_by_age_gender_regions[pop_by_age_gender_regions$Region == selected & pop_by_age_gender_regions$`Age Cohort` != \"Total\",]\n    d_plot_age <- spread(d_plot_age, Variable, Value)\n    \n    d_plot_age_calc <- d_plot_age %>%\n      group_by(`Age Cohort`, Gender, Region) %>%\n      mutate(Sum_Pop = sum(Population),\n             MOEsq = (`Margins of Error`)^2,\n             MOEsqAgg = sum(MOEsq),\n             MOEsqAggsq = sqrt(MOEsqAgg)) %>%\n      select(`Age Cohort`, Gender, Sum_Pop, MOEsqAggsq, Region)\n    \n    d_plot_age_calc$Population <- with(d_plot_age_calc, ifelse(Gender == \"Male\", -Sum_Pop, Sum_Pop))\n\n    d_plot_age_calc_plot <- unique(d_plot_age_calc %>% \n      select(`Age Cohort`, Region, Gender, Population)) %>% \n      spread(Gender, Population) %>% \n      rename(Age = `Age Cohort`) %>% \n      mutate(abs_m_pop = abs(Male))\n    \n    d_plot_age_calc_plot$Age <- factor(d_plot_age_calc_plot$Age, levels = c(\"0 to 4 years\",\n                                                                            \"5 to 9 years\",\n                                                                            \"10 to 14 years\",\n                                                                            \"15 to 19 years\",\n                                                                            \"20 to 24 years\",\n                                                                            \"25 to 29 years\",\n                                                                            \"30 to 34 years\",\n                                                                            \"35 to 44 years\",\n                                                                            \"45 to 54 years\",\n                                                                            \"55 to 64 years\",\n                                                                            \"65 to 74 years\",\n                                                                            \"75 to 84 years\",\n                                                                            \"85 years and over\"))\n    \n    m <- list(l=120, b=100) # l = left; r = right; t = top; b = bottom\n    xState <- list(tickangle = 0, title = \"Population\", \n              tickmode='array', \n              tickvals = c(-600000, -500000, -400000, -300000, -200000, -100000, 0, 100000, 200000, 300000, 400000, 500000, 600000), \n              ticktext = c('600000', '500000', '400000', '300000', '200000', '100000', '0', '100000', '200000', '300000', '400000', '500000', '600000'))\n    xRegion <- list(tickangle = 0, title = \"Population\", \n               tickmode='array', \n               tickvals = c(-100000, -80000, -60000, -40000, -20000, 0, 20000, 40000, 60000, 80000, 100000), \n               ticktext = c('100000', '80000', '60000', '40000', '20000', '0', '20000', '40000', '60000', '80000', '100000'))\n    y <- list(tickangle = 0, title = \"Age Range\")\n    \n    if (input$select == \"Statewide\") {\n      xx = xState\n    } else {\n      xx = xRegion\n    }\n    dplotage <- plot_ly(d_plot_age_calc_plot, x = ~Female, y = ~Age, type = 'bar',\n                        hoverinfo = 'name+text',textposition = 'auto',\n                        orientation = 'h', name = 'Female', text = ~paste0(Female),\n                        marker = list(color = 'rgba(222,45,38,0.8)', \n                                                  width = 3)) %>%\n                add_trace(x=~Male, name = 'Male',  text = ~paste0(abs_m_pop),                      \n                          marker = list(color = 'rgb(49,130,189)', \n                                                  width = 3)) %>%\n                layout(margin = m, legend = list(traceorder='reversed', orientation = 'h', x = 0.1, y = -0.1),\n                       title = paste(paste0(unique(d_plot_age_calc_plot$Region), \",\"),\n                                     max_year_pop_regions,  \n                                     sep = \" \"),\n                       annotations = list(x = 1, y = -0.3, text = \"Source: U.S. Census\", \n                            showarrow = F, xref='paper', yref='paper', \n                            xanchor='right', yanchor='auto', xshift=0, yshift=0,\n                            font=list(size=15, color=\"grey\")),\n                       barmode = 'overlay',\n                       xaxis = xx, \n                       yaxis = y)\n\n    dplotage\n\t})\n  \n  ###########################  \n\n  output$DPlot_race <- renderPlotly({\n    shiny::validate(\n      need(input$select != \"\", \"Please select a Region to populate the chart\")\n    )    \n    selected<- input$select\n    d_plot_race <- pop_by_race_gender_regions[pop_by_race_gender_regions$Region == selected & pop_by_race_gender_regions$`Race/Ethnicity` != \"All\",]\n    d_plot_race <- spread(d_plot_race, Variable, Value)\n    \n    d_plot_race_calc <- d_plot_race %>%\n      group_by(`Race/Ethnicity`, Gender, Region) %>%\n      mutate(Sum_Pop = sum(Population),\n             MOEsq = (`Margins of Error`)^2,\n             MOEsqAgg = sum(MOEsq),\n             MOEsqAggsq = sqrt(MOEsqAgg)) %>%\n      select(`Race/Ethnicity`, Gender, Sum_Pop, MOEsqAggsq, Region)\n    \n    d_plot_race_calc$Population <- with(d_plot_race_calc, ifelse(Gender == \"Male\", -Sum_Pop, Sum_Pop))\n\n    d_plot_race_calc_plot <- unique(d_plot_race_calc %>% \n      select(`Race/Ethnicity`, Region, Gender, Population)) %>% \n      spread(Gender, Population) %>% \n      rename(Race = `Race/Ethnicity`) %>% \n      mutate(abs_m_pop = abs(Male))\n    \n    d_plot_race_calc_plot$Race <- factor(d_plot_race_calc_plot$Race, levels = c(\"Native Hawaiian and Other Pacific Islander\", \n                                                              \"American Indian and Alaska Native Alone\",\n                                                              \"Two or More Races\",\n                                                              \"Asian Alone\",\n                                                              \"Some Other Race Alone\",\n                                                              \"Black or African American Alone\",\n                                                              \"Hispanic or Latino\",\n                                                              \"White Alone Not Hispanic or Latino\",\n                                                              \"White Alone\"))\n    \n    m <- list(l=250, b=100) # l = left; r = right; t = top; b = bottom\n    xState <- list(tickangle = 0, \n                   title = \"Population\", \n                   tickmode='array', \n                   tickvals = c( -1250000, -1000000, -750000, -500000, -250000, 0, \n                                250000, 500000, 750000, 1000000, 1250000), \n                   ticktext = c('1250000', '1000000', '750000', '500000', '250000', '0', \n                                '250000', '500000', '750000', '1000000', '1250000'))\n    xRegion <- list(tickangle = 0, title = \"Population\", \n               tickmode='array', \n               tickvals = c(-300000, -250000, -200000, -150000, -100000, -50000, 0, \n                            50000, 100000, 150000, 200000, 250000, 300000), \n               ticktext = c('300000', '250000', '200000', '150000', '100000', '50000', '0', \n                            '50000', '100000', '150000', '200000', '250000', '300000'))\n    yy <- list(tickangle = 0, \n              title = \"Race/Ethnicity\", \n              categoryorder = 'array', \n              categoryarray = c(\"Native Hawaiian and Other Pacific Islander\", \n                                \"American Indian and Alaska Native Alone\", \n                                \"Two or More Races\", \n                                \"Asian Alone\", \n                                \"Some Other Race Alone\", \n                                \"Black or African American Alone\", \n                                \"Hispanic or Latino\", \n                                \"White Alone Not Hispanic or Latino\", \n                                \"White Alone\"))\n    \n    if (input$select == \"Statewide\") {\n      xx = xState\n    } else {\n      xx = xRegion\n    }\n    dplotrace <- plot_ly(d_plot_race_calc_plot, x = ~Female, y = ~Race, type = 'bar',\n                        hoverinfo = 'name+text',textposition = 'auto',\n                        orientation = 'h', name = 'Female', text = ~paste0(Female),\n                        marker = list(color = 'rgba(222,45,38,0.8)', \n                                                  width = 3)) %>%\n                add_trace(x=~Male, name = 'Male',  text = ~paste0(abs_m_pop),                      \n                          marker = list(color = 'rgb(49,130,189)', \n                                                  width = 3)) %>%\n                layout(margin = m,\n                       legend = list(traceorder='reversed', orientation = 'h', x = 0, y = -0.1),\n                       title = paste(paste0(unique(d_plot_race_calc_plot$Region), \",\"),\n                                     max_year_pop_regions,  \n                                     sep = \" \"),\n                       annotations = list(x = 1, y = -0.3, text = \"Source: U.S. Census\", \n                            showarrow = F, xref='paper', yref='paper', \n                            xanchor='right', yanchor='auto', xshift=0, yshift=0,\n                            font=list(size=15, color=\"grey\")),\n                       barmode = 'overlay',\n                       xaxis = xx, \n                       yaxis = yy)\n\n    dplotrace\n\t})\n  ###########################   \n\n  output$Dplot_mhi <- renderPlotly({\n    shiny::validate(\n      need(input$select != \"\", \"Please select a Region to populate the chart\")\n    )    \n    selected<- input$select\n    \n  if (selected == \"Southwest Region\") {\n    marker_select = list(color = c('rgba(204,204,204,1)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)', \n                                   '#1f77b4', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)'))\n  } else if (selected == \"South Central Region\") {\n    marker_select = list(color = c('rgba(204,204,204,1)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)', '#1f77b4', \n                                   'rgba(204,204,204,1)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)')) \n  } else if (selected == \"Eastern Region\") {\n    marker_select = list(color = c('rgba(204,204,204,1)', '#1f77b4', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)', \n                                   'rgba(204,204,204,1)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)'))     \n  } else if (selected == \"North Central Region\") {\n    marker_select = list(color = c('rgba(204,204,204,1)', 'rgba(204,204,204,1)', '#1f77b4', 'rgba(204,204,204,1)', \n                                   'rgba(204,204,204,1)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)'))  \n  } else if (selected == \"Western Region\") {\n    marker_select = list(color = c('rgba(204,204,204,1)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)', \n                                   'rgba(204,204,204,1)', 'rgba(204,204,204,1)', '#1f77b4'))\n  } else if (selected == \"Central Region\") {\n    marker_select = list(color = c('#1f77b4', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)', \n                                   'rgba(204,204,204,1)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)')) \n  } else { #Statewide\n    marker_select = list(color = c('rgba(204,204,204,1)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)', \n                                   'rgba(204,204,204,1)', '#1f77b4', 'rgba(204,204,204,1)')) \n  }\n    \n    total_mhi <- mhi_df_regions[mhi_df_regions$Variable == \"Median Household Income\",]\n    total_n <- total_mhi %>% \n      count(Region)\n    total_mhi <- merge(total_mhi, total_n, by = \"Region\")\n    total_mhi <- unique(total_mhi %>% \n      group_by(Region) %>% \n      mutate(tot_mhi = sum(Value), \n             final_mhi = tot_mhi / n) %>% \n      select(Region, n, final_mhi))\n      \n    total_moe <- mhi_df_regions[mhi_df_regions$Variable == \"Margins of Error\",]\n    total_moe <- unique(total_moe %>% \n      group_by(Region) %>% \n      mutate(final_moe = aggregate_moe(Value)) %>% \n      select(final_moe, Region))\n    \n    mhi_df_regions_calc <- merge(total_mhi, total_moe, by = \"Region\")\n    mhi_df_regions_calc$final_mhi <- round(mhi_df_regions_calc$final_mhi, 0)\n    mhi_df_regions_calc$final_moe <- round(mhi_df_regions_calc$final_moe, 0)\n    mhi_df_regions_calc$Region <- factor(mhi_df_regions_calc$Region, \n                                         levels = c(\"Statewide\", \n                                                    \"Southwest Region\",      #1\n                                                    \"South Central Region\",  #2\n                                                    \"Eastern Region\",        #3\n                                                    \"North Central Region\",  #4\n                                                    \"Western Region\",        #5\n                                                    \"Central Region\"))\n    m <- list(b=110, r=60) # l = left; r = right; t = top; b = bottom\n    dplot3 <- plot_ly(mhi_df_regions_calc, x = ~Region, y = ~final_mhi, \n                     name = 'Median Household Income', type = 'bar', \n                               marker = marker_select,\n                     hoverinfo = 'text', text = ~paste(paste0(\"$\", final_mhi), \"+/-\", final_moe, sep = \" \"), \n                     error_y = ~list(array = final_moe, color = '#000000')) %>%\n     layout(margin=m, title = paste(selected, \"vs. All Regions,\", max_year_mhi_regions, sep = \" \"),\n         xaxis = list(title = \"\", tickangle = 30),\n         yaxis = list(title = \"Income ($)\"), \n         barmode = 'group', legend = list(x = 0.7, y = 0.95),\n         annotations = list(x = 1, y = -0.35, text = \"Source: U.S. Census\", \n                            showarrow = F, xref='paper', yref='paper', \n                            xanchor='right', yanchor='auto', xshift=0, yshift=0,\n                            font=list(size=15, color=\"grey\")))\n     dplot3    \n  })\n  ###########################  \n  output$mhi_text <- renderText({\n     input$select\n  })\n  ########################### \n  output$mhi_value <- renderText({\n     selected<- input$select\n     total_mhi <- mhi_df_regions[mhi_df_regions$Variable == \"Median Household Income\",]\n    total_n <- total_mhi %>% \n      count(Region)\n    total_mhi <- merge(total_mhi, total_n, by = \"Region\")\n    total_mhi <- unique(total_mhi %>% \n      group_by(Region) %>% \n      mutate(tot_mhi = sum(Value), \n             final_mhi = tot_mhi / n) %>% \n      select(Region, n, final_mhi))\n      \n    total_moe <- mhi_df_regions[mhi_df_regions$Variable == \"Margins of Error\",]\n    total_moe <- unique(total_moe %>% \n      group_by(Region) %>% \n      mutate(final_moe = aggregate_moe(Value)) %>% \n      select(final_moe, Region))\n    \n    mhi_df_regions_calc <- merge(total_mhi, total_moe, by = \"Region\")\n    mhi_df_regions_calc$final_mhi <- round(mhi_df_regions_calc$final_mhi, 0)\n    mhi_df_regions_calc$final_moe <- round(mhi_df_regions_calc$final_moe, 0)\n    mhi_df_regions_calc$Region <- factor(mhi_df_regions_calc$Region, \n                                         levels = c(\"Statewide\", \n                                                    \"Southwest Region\",      #1\n                                                    \"South Central Region\",  #2\n                                                    \"Eastern Region\",        #3\n                                                    \"North Central Region\",  #4\n                                                    \"Western Region\",        #5\n                                                    \"Central Region\"))\n     mhi_value_df <- mhi_df_regions_calc[mhi_df_regions_calc$Region == selected,]\n     value <- format(unique(mhi_value_df$final_mhi), big.mark=\",\", scientific=FALSE) \n     paste0(\"$\", value)\n  })\n  ########################### \n  output$mhi_moe <- renderText({\n     selected<- input$select\n          total_mhi <- mhi_df_regions[mhi_df_regions$Variable == \"Median Household Income\",]\n    total_n <- total_mhi %>% \n      count(Region)\n    total_mhi <- merge(total_mhi, total_n, by = \"Region\")\n    total_mhi <- unique(total_mhi %>% \n      group_by(Region) %>% \n      mutate(tot_mhi = sum(Value), \n             final_mhi = tot_mhi / n) %>% \n      select(Region, n, final_mhi))\n      \n    total_moe <- mhi_df_regions[mhi_df_regions$Variable == \"Margins of Error\",]\n    total_moe <- unique(total_moe %>% \n      group_by(Region) %>% \n      mutate(final_moe = aggregate_moe(Value)) %>% \n      select(final_moe, Region))\n    mhi_df_regions_calc <- merge(total_mhi, total_moe, by = \"Region\")\n    mhi_df_regions_calc$final_mhi <- round(mhi_df_regions_calc$final_mhi, 0)\n    mhi_df_regions_calc$final_moe <- round(mhi_df_regions_calc$final_moe, 0)\n    mhi_df_regions_calc$Region <- factor(mhi_df_regions_calc$Region, \n                                         levels = c(\"Statewide\", \n                                                    \"Southwest Region\",      #1\n                                                    \"South Central Region\",  #2\n                                                    \"Eastern Region\",        #3\n                                                    \"North Central Region\",  #4\n                                                    \"Western Region\",        #5\n                                                    \"Central Region\"))\n     mhi_value_df <- mhi_df_regions_calc[mhi_df_regions_calc$Region == selected,]\n     moe <- format(unique(mhi_value_df$final_moe), big.mark=\",\", scientific=FALSE) \n     paste0(\"+/-\", moe)\n  })  \n  ###########################\n  cols <- c(\"White\", \"Black\", \"Hispanic\", \"Other\", \"Total\")\n  bh_plot1[cols] <- sapply(bh_plot1[cols],as.numeric)\n\n  output$BHPlot1 <- renderPlotly({\n    shiny::validate(\n      need(input$select != \"\", \"Please select a Region to populate the chart\")\n    )    \n    selected<- input$select\n    bh_plot_race <- bh_plot1[bh_plot1$Region == selected,]\n    bh_plot_race <- bh_plot_race[bh_plot_race$`Age Range` != \"0 to 21\",]\n    m <- list(b=110) # l = left; r = right; t = top; b = bottom\n    x <- list(tickangle = 0)\n    \n    bh_plot_race$`Age Range` <- factor(bh_plot_race$`Age Range`, levels = c(\"0 to 5\", \"6 to 9\", \"10 to 15\", \"16 to 19\", \"20 to 21\"))\n    bh_plot_race <- arrange(bh_plot_race, `Age Range`)\n    bhplotrace <- plot_ly(bh_plot_race, x = ~`Age Range`, y = ~White, name = 'White', type = 'bar', \n                     hoverinfo = 'text', text = ~paste0(White), textposition = 'auto') %>%\n                   add_trace( y = ~Hispanic, name = 'Hispanic or Latino', text = ~paste0(Hispanic)) %>%\n\n             add_trace( y = ~Black, name = 'Black or African American', text = ~paste0(Black)) %>%\n             add_trace( y = ~Other, name = 'Other', text = ~paste0(Other)) %>%\n     layout(margin=m, title = paste(paste0(unique(bh_plot_race$Region), \",\"), \"2010\", sep = \" \"),\n         xaxis = list(title = \"\"),\n         yaxis = list(title = \"Number\"), \n         barmode = 'group', legend = list(orientation = 'h', x = 0.2, y = -0.15),\n         annotations = list(x = 1, y = -0.35, text = \"Source: US Census; Calculations by CONNECT project\", \n                            showarrow = F, xref='paper', yref='paper', \n                            xanchor='right', yanchor='auto', xshift=0, yshift=0,\n                            font=list(size=15, color=\"grey\")))\n     bhplotrace    \n  })\n  ###########################  \n   output$BHTable <- function() {\n    if(input$select==\"Statewide\") {\n      bh_CT %>%\n       knitr::kable(\"html\", row.names=NA) %>%\n       kable_styling(c(\"striped\", \"hover\", \"condensed\", \"responsive\", \"xs\"), full_width = T) %>%\n       group_rows(\"0 - 5\", 1, 3) %>%\n       group_rows(\"6 - 9\", 4, 6) %>%\n       group_rows(\"10 - 15\", 7, 9) %>%\n       group_rows(\"16 - 19\", 10, 12) %>%\n       group_rows(\"20 - 21\", 13, 15) %>%\n       group_rows(\"0 - 21\", 16, 18) %>%\n       add_footnote(c(\"Source: US Census; Calculations by CONNECT project\"), notation = \"alphabet\")\n       #scroll_box(height = \"400px\")\n    } else if (input$select==\"Southwest Region\") {\n      bh_r1 %>%\n       knitr::kable(\"html\") %>%\n       kable_styling(c(\"striped\", \"hover\", \"condensed\", \"responsive\"), full_width = T ) %>%\n       group_rows(\"0 - 5\", 1, 3) %>%\n       group_rows(\"6 - 9\", 4, 6) %>%\n       group_rows(\"10 - 15\", 7, 9) %>%\n       group_rows(\"16 - 19\", 10, 12) %>%\n       group_rows(\"20 - 21\", 13, 15) %>%\n       group_rows(\"0 - 21\", 16, 18) %>%\n       add_footnote(c(\"Source: US Census; Calculations by CONNECT project\"), notation = \"alphabet\") \n       # scroll_box(height = \"400px\")\n    } else if (input$select==\"South Central Region\") {\n        bh_r2 %>%\n       knitr::kable(\"html\") %>%\n       kable_styling(c(\"striped\", \"hover\", \"condensed\", \"responsive\"), full_width = T) %>%\n       group_rows(\"0 - 5\", 1, 3) %>%\n       group_rows(\"6 - 9\", 4, 6) %>% \n       group_rows(\"10 - 15\", 7, 9) %>% \n       group_rows(\"16 - 19\", 10, 12) %>% \n       group_rows(\"20 - 21\", 13, 15) %>% \n       group_rows(\"0 - 21\", 16, 18) %>%\n       add_footnote(c(\"Source: US Census; Calculations by CONNECT project\"), notation = \"alphabet\") \n       # scroll_box(height = \"400px\")\n    } else if (input$select==\"Eastern Region\") {\n        bh_r3 %>%\n       knitr::kable(\"html\") %>%\n       kable_styling(c(\"striped\", \"hover\", \"condensed\", \"responsive\"), full_width = T) %>%\n       group_rows(\"0 - 5\", 1, 3) %>%\n       group_rows(\"6 - 9\", 4, 6) %>% \n       group_rows(\"10 - 15\", 7, 9) %>% \n       group_rows(\"16 - 19\", 10, 12) %>% \n       group_rows(\"20 - 21\", 13, 15) %>% \n       group_rows(\"0 - 21\", 16, 18) %>%\n       add_footnote(c(\"Source: US Census; Calculations by CONNECT project\"), notation = \"alphabet\") \n       # scroll_box(height = \"400px\")\n    } else if (input$select==\"North Central Region\") {\n        bh_r4 %>%\n       knitr::kable(\"html\") %>%\n       kable_styling(c(\"striped\", \"hover\", \"condensed\", \"responsive\"), full_width = T) %>%\n       group_rows(\"0 - 5\", 1, 3) %>%\n       group_rows(\"6 - 9\", 4, 6) %>% \n       group_rows(\"10 - 15\", 7, 9) %>% \n       group_rows(\"16 - 19\", 10, 12) %>% \n       group_rows(\"20 - 21\", 13, 15) %>% \n       group_rows(\"0 - 21\", 16, 18) %>%\n       add_footnote(c(\"Source: US Census; Calculations by CONNECT project\"), notation = \"alphabet\") \n       # scroll_box(height = \"400px\")\n    } else if (input$select==\"Western Region\") {\n        bh_r5 %>%\n       knitr::kable(\"html\") %>%\n       kable_styling(c(\"striped\", \"hover\", \"condensed\", \"responsive\"), full_width = T) %>%\n       group_rows(\"0 - 5\", 1, 3) %>%\n       group_rows(\"6 - 9\", 4, 6) %>% \n       group_rows(\"10 - 15\", 7, 9) %>% \n       group_rows(\"16 - 19\", 10, 12) %>% \n       group_rows(\"20 - 21\", 13, 15) %>% \n       group_rows(\"0 - 21\", 16, 18) %>%\n       add_footnote(c(\"Source: US Census; Calculations by CONNECT project\"), notation = \"alphabet\") \n       # scroll_box(height = \"400px\")\n    } else if (input$select==\"Central Region\") {\n       bh_r6 %>%\n       knitr::kable(\"html\") %>%\n       kable_styling(c(\"striped\", \"hover\", \"condensed\", \"responsive\"), full_width = T) %>%\n       group_rows(\"0 - 5\", 1, 3) %>%\n       group_rows(\"6 - 9\", 4, 6) %>% \n       group_rows(\"10 - 15\", 7, 9) %>% \n       group_rows(\"16 - 19\", 10, 12) %>% \n       group_rows(\"20 - 21\", 13, 15) %>% \n       group_rows(\"0 - 21\", 16, 18) %>%\n       add_footnote(c(\"Source: US Census; Calculations by CONNECT project\"), notation = \"alphabet\") \n       # scroll_box(height = \"400px\")\n    }\n   }\n  ###########################  \n  output$edu_text <- renderUI({\n    HTML(paste(\"<font color=\\\"#000000\\\"><b>\", \"<p>&nbsp;</p>\", \" - Calculated percents resulting from counts of less than 5 students have been suppressed.\", \"<p>&nbsp;</p>\", \" - Be aware that as the number of districts selected increases, visibility/usability of this chart may decrease.\", \"</b></font>\"))\n  })\n  ########################### \n  \ndd <- unique(edu$District)\n# dd.col <- cm.colors(length(dd))\n# set.seed(001)\n# dd.col.random <- sample(dd.col)\n# #names(dd.col.random)  <- dd\n# \n# brewerplot <- function (palette) {\n#   p + scale_fill_brewer(palette = palette) \n# }\n# brewerplot (\"Set1\")\n  \n  \n  values = list(\"#8dd3c7\", \"#ffffb3\", \"#bebada\", \"#fb8072\", \"#80b1d3\", \"#fdb462\",\n                \"#b3de69\", \"#fccde5\", \"#d9d9d9\", \"#bc80bd\", \"#ccebc5\", \"#ffed6f\",\n                \"#e6194b\", \"#3cb44b\", \"#ffe119\", \"#0082c8\", \"#f58231\")\n  \n    #scale_fill_brewer palette Set3\n\n  # , \"#911eb4\", \n  #               \"#46f0f0\", \"#f032e6\", \"#d2f53c\", \"#fabebe\", \"#008080\", \"#e6beff\", \n  #               \"#aa6e28\", \"#fffac8\", \"#800000\", \"#aaffc3\", \"#808000\", \"#ffd8b1\", \n  #               \"#000080\", \"#808080\", \"#FFFFFF\", \"#000000\", \"#a6cee3\", \"#1f78b4\")\n  #   \n  #scale_fill_brewer palette Set1\n  # values = list(\"#a6cee3\", \"#1f78b4\", \"#b2df8a\", \"#33a02c\", \"#fb9a99\", \"#e31a1c\", \n  #               \"#fdbf6f\", \"#ff7f00\", \"#cab2d6\", \"#6a3d9a\", \"#ffff99\", \"#b15928\")\n  \n  dups <- list(values)[rep(1,12)] #<- repeats it 17 times to create list of 204\n  dups2 <- do.call(c, unlist(dups, recursive=FALSE))\n  set.seed(007)\n  dd.col.random <- sample(dups2)\n  names(dd.col.random)  <- dd #ensures both charts have same colors assigned to same districts\n\n   output$EPlot1 <- renderPlotly({\n     shiny::validate(\n       need(input$select_edu != \"\", \"Please select a District to populate the chart\")\n     )\n     selected<- input$select_edu\n     edu_plot <- edu[edu$`Measure Type` == \"Percent\" & edu$District %in% selected & \n                       edu$Value != -9999.0 &\n                       edu$Year == max_year_edu,]\n     m <- list(b=100)\n         e_plot1 <- ggplot(data=edu_plot, \n                           aes(x=`Indicator of Educational Need`, y=Value, fill=District))+\n         geom_bar(stat=\"identity\", position = \"dodge\") + \n         #geom_text(aes(label=paste(Value, \"%\")), size=3, position = position_dodge(width=1)) + \n         theme_bw() +\n         xlab(\"Indicator of Educational Need\") + ylab(\"Percent\") +\n         scale_x_discrete(labels = function(x) str_wrap(x, width=20)) +\n         scale_fill_manual(values = dd.col.random)+\n         theme(axis.text = element_text(size=8), \n \t\t\t         plot.title = element_text(size=10, face=\"bold\"),\n               axis.title = element_text(size=10), \n \t\t\t         plot.margin = unit(c(0.1,0.1,1,0.1), \"cm\")) +\n         labs(caption = \"Source: Connecticut State Department of Education\")\n         e_plot1 <- ggplotly(e_plot1)\n         e_plot1 <- e_plot1 %>% layout(margin=m, annotations = list(x = 1.2, y = -0.3, text = \"Source: Connecticut State Department of Education\", \n                            showarrow = F, xref='paper', yref='paper', \n                            xanchor='right', yanchor='auto', xshift=0, yshift=0,\n                            font=list(size=15, color=\"grey\")))\n         e_plot1\n   })\n  ###########################  \n  output$EPlot2 <- renderPlotly({\n    shiny::validate(\n      need(input$select_edu != \"\", \"Please select a District to populate the chart\")\n    )    \n    selected<- input$select_edu\n    edu2_plot <- edu2[edu2$`Measure Type` == \"Percent\" & edu2$District %in% selected & \n                        edu2$Value != -6666 & edu2$Value != -9999 & edu2$Year == max_year_edu2,]\n    shiny::validate(\n      need(nrow(edu2_plot) != 0, \"No data are available for your selection, try selecting another District\")\n    )\n      x <- list(\n        ticklen = 5,\n        tickwidth = 1,\n        tickfont = list(size = 10)\n      )\n      y <- list(\n        ticklen = 15,\n        tickwidth = 1\n      )      \n      m <- list(l=100, r=20, b=80, t=40) # l = left; r = right; t = top; b = bottom\n        e_plot2 <- ggplot(data=edu2_plot, aes(x=`Race/Ethnicity`, y=Value, fill=District)) +\n        geom_bar(stat=\"identity\", position = \"dodge\") + ylab(\"Percent\") +\n        #geom_text(aes(x=`Race/Ethnicity`, y=Value, label=paste(Value, \"%\")), vjust=-0.4, size=3, position = position_dodge(width=1)) + \n          theme_bw() + \n        scale_x_discrete(labels = function(x) str_wrap(x, width=20)) +\n        scale_fill_manual(values = dd.col.random)+ \n        theme(axis.text = element_text(size=8),\n\t\t\t        plot.title = element_text(size=10, face=\"bold\"), \n              axis.title=element_text(size=10), \n \t\t\t        plot.margin = unit(c(0.1,0.1,1,0.1), \"cm\")) +     \n        labs(caption = \"Source: Connecticut State Department of Education\")\n        e_plot2 <- ggplotly(e_plot2)\n        e_plot2 <- e_plot2 %>% layout(\n         margin=m, annotations = list(x = 1.2, y = -0.3, text = \"Source: Connecticut State Department of Education\", \n                            showarrow = F, xref='paper', yref='paper', \n                            xanchor='right', yanchor='auto', xshift=0, yshift=0,\n                            font=list(size=15, color=\"grey\")),\n         barmode = 'group',\n         xaxis = x, yaxis = y, \n         bargap = 0.3,\n         legend = list(x = 100, y = 0.9, font = list(size=10)),\n         xaxis = x, yaxis = y)\n        e_plot2        \n    })\n  ###########################  \n\n  output$EPlot3 <- renderPlotly({\n    shiny::validate(\n      need(input$select_edu != \"\", \"Please select a District to populate the chart\")\n    )    \n    selected<- input$select_edu\n    edu3_plot <- edu3[edu3$District %in% selected & edu3$Value != -6666 & edu3$Value != -9999 & \n                        edu3$Year == max_year_edu3,]\n    shiny::validate(\n      need(nrow(edu3_plot) != 0, \"No data are available for your selection, try selecting another District\")\n    )\n      x <- list(\n        ticklen = 5,\n        tickwidth = 1,\n        tickfont = list(size = 10)\n      )\n      y <- list(\n        ticklen = 15,\n        tickwidth = 1\n      )      \n      m <- list(l=100, r=20, b=80, t=40) # l = left; r = right; t = top; b = bottom\n        e_plot3 <- ggplot(data=edu3_plot, aes(x=`Sanction Type`, y=Value, fill=District)) +\n        geom_bar(stat=\"identity\", position = \"dodge\") + ylab(\"Number\") +\n        #geom_text(aes(x=`Sanction Type`, y=Value, label=paste(Value)), vjust=-0.4, size=3, \n                #  position = position_dodge(width=1)) + \n     theme_bw() + \n        scale_x_discrete(labels = function(x) str_wrap(x, width=20)) +\n        scale_fill_manual(values = dd.col.random)+ \n        theme(axis.text = element_text(size=8),\n\t\t\t        plot.title = element_text(size=10, face=\"bold\"), \n              axis.title=element_text(size=10), \n \t\t\t        plot.margin = unit(c(0.1,0.1,1,0.1), \"cm\")) +     \n        labs(caption = \"Source: Connecticut State Department of Education\")\n        e_plot3 <- ggplotly(e_plot3)\n        e_plot3 <- e_plot3 %>% layout(\n         margin=m, annotations = list(x = 1.2, y = -0.3, text = \"Source: Connecticut State Department of Education\", \n                            showarrow = F, xref='paper', yref='paper', \n                            xanchor='right', yanchor='auto', xshift=0, yshift=0,\n                            font=list(size=15, color=\"grey\")),\n         barmode = 'group',\n         xaxis = x, yaxis = y, \n         bargap = 0.3,\n         legend = list(x = 100, y = 0.9, font = list(size=10)),\n         xaxis = x, yaxis = y)\n        e_plot3        \n    })\n  ########################### \n\n  output$EPlot4 <- renderPlotly({\n    shiny::validate(\n      need(input$select_edu != \"\", \"Please select a District to populate the chart\")\n    )    \n    selected<- input$select_edu\n    edu4_plot <- edu4[edu4$District %in% selected & edu4$Value != -6666 & edu4$Value != -9999 & \n                        edu4$Year == max_year_edu4,]\n    shiny::validate(\n      need(nrow(edu4_plot) != 0, \"No data are available for your selection, try selecting another District\")\n    )\n      x <- list(\n        ticklen = 5,\n        tickwidth = 1,\n        tickfont = list(size = 10)\n      )\n      y <- list(\n        ticklen = 15,\n        tickwidth = 1\n      )      \n      m <- list(l=100, r=20, b=80, t=40) # l = left; r = right; t = top; b = bottom\n        e_plot4 <- ggplot(data=edu4_plot, aes(x=`Incident Type`, y=Value, fill=District)) +\n        geom_bar(stat=\"identity\", position = \"dodge\") + ylab(\"Number\") +\n        #geom_text(aes(x=`Incident Type`, y=Value, label=paste(Value)), vjust=-0.4, size=3, \n       #           position = position_dodge(width=1)) + \n          theme_bw() + \n        scale_x_discrete(labels = function(x) str_wrap(x, width=10)) +\n        scale_fill_manual(values = dd.col.random)+ \n        theme(axis.text = element_text(size=8),\n\t\t\t        plot.title = element_text(size=10, face=\"bold\"), \n              axis.title=element_text(size=10), \n \t\t\t        plot.margin = unit(c(0.1,0.1,1,0.1), \"cm\")) +     \n        labs(caption = \"Source: Connecticut State Department of Education\")\n        e_plot4 <- ggplotly(e_plot4)\n        e_plot4 <- e_plot4 %>% layout(\n         margin=m, annotations = list(x = 1.2, y = -0.3, text = \"Source: Connecticut State Department of Education\", \n                            showarrow = F, xref='paper', yref='paper', \n                            xanchor='right', yanchor='auto', xshift=0, yshift=0,\n                            font=list(size=15, color=\"grey\")),\n         barmode = 'group',\n         xaxis = x, yaxis = y, \n         bargap = 0.3,\n         legend = list(x = 100, y = 0.9, font = list(size=10)),\n         xaxis = x, yaxis = y)\n        e_plot4        \n    })   \n  ###########################\n   # edu5_plot <- kei[kei$FixedDistrict %in% selected & kei$`Level 1` != -9999 & !is.na(kei$`Level 1`) & kei$Year == max_year_kei,]\n   # edu5_plot$`Level 1` <- round(edu5_plot$`Level 1`, 0)\n   # edu5_plot$`Level 2` <- round(edu5_plot$`Level 2`, 0)\n   # edu5_plot$`Level 3` <- round(edu5_plot$`Level 3`, 0)\n   # #Create list of plots\n   # for (i in 1:length(selected)) {\n   #   df <- edu5_plot[edu5_plot$FixedDistrict == selected[i],]\n   #   plotname <- plot_ly(df,\n   #                       y = ~str_wrap(`Domain`, width=15),\n   #                       x = ~`Level 1`,\n   #                       name = 'Level 1',\n   #                       type = 'bar',\n   #                       hoverinfo = 'text',\n   #                       text = ~paste0(`Level 1`, '%'),\n   #                       textposition = 'auto') %>%\n   #              add_trace(x = ~`Level 2`, name = 'Level 2', text = ~paste0(`Level 2`, '%')) %>%\n   #              add_trace(x = ~`Level 3`, name = 'Level 3', text = ~paste0(`Level 3`, '%')) %>%\n   #              layout(margin=m,\n   #                     #title = paste(unique(df$FixedDistrict), max_year_kei, sep = \" \"),\n   #                     xaxis = list(title = \"Percentage of Students\"),\n   #                     yaxis = list(title = \"Skill Domain\"),\n   #                     barmode = 'stack', legend = list(orientation = 'h', x = 0.2, y = -0.25, traceorder='normal'),\n   #                     annotations = list(list(x = 1, y = -0.35, text = \"Source: Connecticut State Department of Education\",\n   #                                 showarrow = F, xref='paper', yref='paper',\n   #                                 xanchor='right', yanchor='auto', xshift=0, yshift=0,\n   #                                 font=list(size=15, color=\"grey\")),\n   #                                 list(x = 0.4, y = 1.1, text = selected[i],\n   #                                 showarrow = F, xref='paper', yref='paper',\n   #                                 xanchor='right', yanchor='auto', xshift=0, yshift=0))\n   #             )\n   #        assign(paste0(\"kei_plot\", i), plotname)\n   # \n   # }\n   # #Combine plots for subplot\n   # \n   # do.call(\"<-\",list(get_kei_plot_only[1], \"parameter_value\"))\n   # \n   # get_kei_plot_only <- grep(\"^kei_plot\", lists, value=T)\n   # \n   # \n   # eval(parse(text=paste(\"df$\", get_kei_plot_only, sep = \"\")))\n   # \n   # thisName = get_kei_plot_only[i]\n   # #plotList[[thisName]] = plot_ly(name=thisName, evaluate=TRUE)\n   # \n   # \n   # eval(get_kei_plot_only) %>% \n   #   subplot(nrows = NROW(.), shareX = TRUE)\n   # \n   # eval(get_kei_plot_only)\n\n   # lists <- ls()[sapply(mget(ls(), .GlobalEnv), is.list)]\n   # get_kei_plot_only <- list(grep(\"^kei_plot\", lists, value=T) )        \n   #          \n   # economics_long %>%\n   #   split(.$variable) %>%\n   #   lapply(function(d) plot_ly(d, x = ~date, y = ~value)) %>%\n   #   subplot(nrows = NROW(.), shareX = TRUE)\n   # \n   # \n   # \n   # \n   # \n   # \n   # library(plotly)\n   # plotList = list()\n   # \n   # for (i in 1:length(get_kei_plot_only)){\n   #   plot = get_kei_plot_only[i]\n   #   sbp <- \n   # }\n   # \n   # sbp = subplot(kei_plot1, kei_plot2)\n   # print(sbp)\n   #   \n   #          thisName = get_kei_plot_only[i]\n   #     plotList[[thisName]] = plot_ly(name=thisName, evaluate=TRUE)\n   # \n   \n})",
    "created" : 1517595824323.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3878221040",
    "id" : "BACC36DB",
    "lastKnownWriteTime" : 1517599280,
    "last_content_update" : 1517599280473,
    "path" : "/srv/shinyapps/appdir/CONNECT2/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}